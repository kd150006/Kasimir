// <auto-generated />
using Kasimir.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Kasimir.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180214232651_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kasimir.Core.Entities.BasketHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BasketDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SumTotal");

                    b.HasKey("Id");

                    b.ToTable("BasketHeaders");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.CashDrawer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<int?>("MeansOfPaymentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("MeansOfPaymentId");

                    b.ToTable("CashDrawers");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int?>("TelephoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BasketHeaderId");

                    b.Property<DateTime>("DateOfTransaction");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("BasketHeaderId");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.MeansOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("MeansOfPayments");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<double>("GrossPrice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double>("NetPrice");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int?>("StockId");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.SerialNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SerialNumberText")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SerialNumbers");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.CashDrawer", b =>
                {
                    b.HasOne("Kasimir.Core.Entities.MeansOfPayment", "MeansOfPayment")
                        .WithMany()
                        .HasForeignKey("MeansOfPaymentId");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Journal", b =>
                {
                    b.HasOne("Kasimir.Core.Entities.BasketHeader", "BasketHeader")
                        .WithMany()
                        .HasForeignKey("BasketHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kasimir.Core.Entities.Product", b =>
                {
                    b.HasOne("Kasimir.Core.Entities.Stock", "Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId");
                });

            modelBuilder.Entity("Kasimir.Core.Entities.SerialNumber", b =>
                {
                    b.HasOne("Kasimir.Core.Entities.Product", "Product")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
